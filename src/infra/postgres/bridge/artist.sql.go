// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: artist.sql

package bridge

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const selectArtists = `-- name: SelectArtists :many
select a.id as id,
    a.name as name,
    a.super_artist_id as super_artist_id,
    a.description as description,
    a.founded_at as founded_at,
    terminated_at as terminated_at 
        from artist a
    order by a.name
`

type SelectArtistsRow struct {
	ID            uuid.UUID
	Name          string
	SuperArtistID uuid.NullUUID
	Description   sql.NullString
	FoundedAt     time.Time
	TerminatedAt  sql.NullTime
}

func (q *Queries) SelectArtists(ctx context.Context) ([]SelectArtistsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectArtistsRow
	for rows.Next() {
		var i SelectArtistsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SuperArtistID,
			&i.Description,
			&i.FoundedAt,
			&i.TerminatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
